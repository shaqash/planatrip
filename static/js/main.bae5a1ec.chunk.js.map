{"version":3,"sources":["firebase.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["config","JSON","parse","process","firebase","app","initializeApp","auth","storage","firestore","FireContext","createContext","Main","lazy","Trip","Thanks","FireProvider","children","Provider","value","Consumer","fire","App","basename","fallback","exact","component","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kLAIMA,G,YAASC,KAAKC,MAAMC,kWAmBXC,GAVbC,IAAIC,cAAcN,GAIX,CACLO,KAJWF,IAAIE,OAKfC,QAJcH,IAAII,cCVTC,G,MAAcC,wBAA+B,OACpDC,EAAOC,gBAAK,kBAAM,gCAClBC,EAAOD,gBAAK,kBAAM,gCAClBE,EAASF,gBAAK,kBAAM,gCAkB1B,SAASG,EAAT,GAAoE,IAA5CC,EAA2C,EAA3CA,SACtB,OACE,cAACP,EAAYQ,SAAb,CAAsBC,MAAOf,EAA7B,SACE,cAACM,EAAYU,SAAb,UAAuB,SAACC,GAAD,OAAUA,EAAOJ,EAAW,yDAK1CK,IAxBf,WACE,OACE,cAACN,EAAD,UACE,cAAC,IAAD,CAAQO,SAAUpB,aAAlB,SACE,cAAC,WAAD,CAAUqB,SAAU,6CAApB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,UAAWd,EAAMe,KAAM,MACpC,cAAC,IAAD,CAAOD,UAAWZ,EAAMa,KAAM,cAC9B,cAAC,IAAD,CAAOD,UAAWX,EAAQY,KAAM,uB,6ICJ7BC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACjB,EAAA,EAAD,MAEFkB,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.bae5a1ec.chunk.js","sourcesContent":["import app from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\n\nconst config = JSON.parse(process.env.REACT_APP_CONFIG || '{}');\n\nexport interface Firebase {\n  auth: app.auth.Auth,\n  storage: app.firestore.Firestore,\n}\ntype FirebaseAPI = () => Firebase;\n\nconst firebase: FirebaseAPI = () => {\n  app.initializeApp(config);\n  const auth = app.auth();\n  const storage = app.firestore();\n\n  return {\n    auth,\n    storage,\n  };\n};\n\nexport default firebase();","import React, { Suspense, lazy, createContext } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport firebase, { Firebase } from './firebase';\nimport './App.css';\n\nexport const FireContext = createContext<null | Firebase>(null);\nconst Main = lazy(() => import('./routes/Main'));\nconst Trip = lazy(() => import('./routes/Trip'));\nconst Thanks = lazy(() => import('./routes/Thanks'));\n\nfunction App() {\n  return (\n    <FireProvider>\n      <Router basename={process.env.PUBLIC_URL}>\n        <Suspense fallback={<div>Loading...</div>}>\n          <Switch>\n            <Route exact component={Main} path={'/'} />\n            <Route component={Trip} path={'/trip/:id'} />\n            <Route component={Thanks} path={'/thanks'} />\n          </Switch>\n        </Suspense>\n      </Router>\n    </FireProvider>\n  );\n}\n\nfunction FireProvider({ children }: { children: React.ReactNode }) {\n  return (\n    <FireContext.Provider value={firebase}>\n      <FireContext.Consumer>{(fire) => fire ? children : <p>can't pull firebase</p>}</FireContext.Consumer>\n    </FireContext.Provider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}